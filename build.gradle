buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.4.2732"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180801"
    makeObfSourceJar = false
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    embed files("libs/DiscordRPC-2.0.1.jar")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    version = "1.12.2-${Calendar.getInstance().get(Calendar.YEAR)}.${Calendar.getInstance().get(Calendar.MONTH) + 1}.${Calendar.getInstance().get(Calendar.DATE)}"
    archiveName "dfTools-${version}.jar"

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        //attributes 'FMLAT': 'dfutils_at.cfg'
    }
}

task buildDiamondCore(type: Jar, dependsOn: reobfJar) {

    version = "1.12.2-1.0.0"
    archiveName "diamondCore-${version}.jar"

    from ("build/classes/main") {
        include 'diamondcore/**'
    }

    from ("build/resources/main") {
        include '**.**'
        include 'assets/diamondcore/**'
    }

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        //attributes 'FMLAT': 'dfutils_at.cfg'
    }
}

task buildItemControl(type: Jar, dependsOn: reobfJar) {

    version = "1.12.2-1.0.0"
    archiveName "itemControl-${version}.jar"

    from ("build/classes/main") {
        include 'itemcontrol/**'
    }

    from ("build/resources/main") {
        include '**.**'
        include 'assets/itemcontrol/**'
    }

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        //attributes 'FMLAT': 'dfutils_at.cfg'
    }
}

task buildDFUtils(type: Jar, dependsOn: reobfJar) {

    version = "1.12.2-1.0.0"
    archiveName "dfUtils-${version}.jar"

    from ("build/classes/main") {
        include 'dfutils/**'
    }

    from ("build/resources/main") {
        include '**.**'
        include 'assets/dfutils/**'
    }

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        //attributes 'FMLAT': 'dfutils_at.cfg'
    }
}

task buildDFAddons(type: Jar, dependsOn: reobfJar) {

    version = "1.12.2-1.0.0"
    archiveName "dfAddons-${version}.jar"

    from ("build/classes/main") {
        include 'dfaddons/**'
    }

    from ("build/resources/main") {
        include '**.**'
        include 'assets/dfaddons/**'
    }

    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        //attributes 'FMLAT': 'dfutils_at.cfg'
    }
}

artifacts {
    //The dfTools build task is included by default.
    archives buildDiamondCore
    archives buildItemControl
    archives buildDFUtils
    archives buildDFAddons
}